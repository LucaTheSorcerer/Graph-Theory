#pragma once

#include <vector>
#include <string>
#include <fstream>
#include <iostream>

using namespace std;

class Graph {
private:
    int n;
    vector<vector<int>> adj_matrix;

public:
    Graph() : n(0) {}

    Graph(string filename) {
        ifstream infile(filename);
        if (!infile) {
            cerr << "Error: could not open file " << filename << endl;
            return;
        }

        infile >> n;
        adj_matrix.resize(n, vector<int>(n, 0));

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                infile >> adj_matrix[i][j];
            }
        }

        infile.close();
    }

    Graph(const Graph& g) {
        n = g.n;
        adj_matrix = g.adj_matrix;
    }

    void printPfad(int x, int y) {
        bool found_path = false;

        for (int i = 0; i < n; i++) {
            if (adj_matrix[x][i] == 1) {
                for (int j = 0; j < n; j++) {
                    if (adj_matrix[i][j] == 1 && adj_matrix[j][y] == 1) {
                        found_path = true;
                        cout << x << " -> " << i << " -> " << y << endl;
                    }
                }
            }
        }

        if (!found_path) {
            cout << "Does not exist" << endl;
        }
    }
};
